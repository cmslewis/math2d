{
	"id": 0,
	"name": "vectormath",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 30,
			"name": "IBox",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent an axis-aligned bounding box (AABB).",
				"text": "Bounding boxes are often used for approximations of geometric shapes or for certain\ncategories of performance-optimized spatial calculations, such as spatial index queries\nand viewbox culling.\n\nA box in Vectormath is defined by its `minX`, `minY`, `maxX`, and `maxY` edges. Where\nrelevant and unless documented otherwise, boxes are interpreted as _closed_ regions,\ni.e. they include those points that lie along their edges.\n\n```\n┌╴x+\ny+     minY ─┌──────┐\n       maxY ─└──────┘\n             │      │\n           minX    maxX\n```\n\nVectormath chooses to lay out this data in a\nflat object structure, as opposed to an array or nested arrays, for ease of use and performance.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link boxAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link boxReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 33,
					"name": "maxX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Min-X boundary of this box, typically the \"right\" edge."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 233,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 34,
					"name": "maxY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Max-Y boundary of this box. Note that this could be either the \"top\" or the \"bottom\" of the\nbox, depending on how your rendering and coordinate system are laid out."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 239,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 31,
					"name": "minX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Min-X boundary of this box, typically the \"left\" edge."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 222,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 32,
					"name": "minY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Min-Y boundary of this box. Note that this could be either the \"top\" or the \"bottom\" of the\nbox, depending on how your rendering and coordinate systems are laid out."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 228,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						33,
						34,
						31,
						32
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 218,
					"character": 21
				}
			]
		},
		{
			"id": 35,
			"name": "IIntersection",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold the result of a point intersection between two pieces of geometry.",
				"tags": [
					{
						"tag": "see",
						"text": "{@link lineIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link lineIntersectPolylineIterator}"
					},
					{
						"tag": "see",
						"text": "{@link lineIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link lineIntersectSegment}"
					},
					{
						"tag": "see",
						"text": "{@link polygonIntersectLineIterator}"
					},
					{
						"tag": "see",
						"text": "{@link polygonIntersectRayIterator}"
					},
					{
						"tag": "see",
						"text": "{@link polygonIntersectSegmentIterator}"
					},
					{
						"tag": "see",
						"text": "{@link polylineIntersectLineIterator}"
					},
					{
						"tag": "see",
						"text": "{@link polylineIntersectRayIterator}"
					},
					{
						"tag": "see",
						"text": "{@link polylineIntersectSegmentIterator}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectPolylineIterator}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link rayIntersectSegment}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectLine}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectPolylineIterator}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectRay}"
					},
					{
						"tag": "see",
						"text": "{@link segmentIntersectSegment}\n"
					}
				]
			},
			"children": [
				{
					"id": 36,
					"name": "exists",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Whether an intersection was found. If the return value of a function is `false` for the `exists` field,\nthe other Intersection values will be set to `NaN` and should not be interpreted."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 318,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 39,
					"name": "t0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The parameterization of the intersection along the first shape's geometry,\nif an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 334,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 40,
					"name": "t1",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The parameterization of the intersection along the second shape's geometry,\nif an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 340,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 37,
					"name": "x",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The x-coordinate of the intersection, if an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 323,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 38,
					"name": "y",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The y-coordinate of the intersection, if an intersection point was found."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 328,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						36,
						39,
						40,
						37,
						38
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 313,
					"character": 30
				}
			]
		},
		{
			"id": 18,
			"name": "ILine",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent a line in 2D space, i.e. some initial point in the plane plus a unit-length direction\nvector coming from that point.",
				"text": "The data representation of a line and the similar {@link IRay} type is actually the same, but Vectormath chooses\nto export these two names for ease of clarity. Functions that may interpret Rays and Lines differently will be\nnamed differently to prevent ambiguity, such as\n{@link polygonIntersectLineIterator} vs {@link polygonIntersectRayIterator}.\n\nWhere relevant, a line is parameterized according to _t_ with movement of distance _t_ along its direction vector.\nIn this mapping, _t_ = 0 represents the initial point (x0, y0), _t_ > 0 moves in the direction of its vector,\nand _t_ < 0 in the opposite direction.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link lineAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link lineReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 21,
					"name": "dirX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the direction of the line, relative to its initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 128,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 22,
					"name": "dirY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the direction of the line, relative to its initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 133,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 19,
					"name": "x0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the line's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 118,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 20,
					"name": "y0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the line's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 123,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						21,
						22,
						19,
						20
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 114,
					"character": 22
				}
			]
		},
		{
			"id": 23,
			"name": "IMat2x3",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold a 2D affine transformation matrix.",
				"text": "Two-dimensional vector graphics operations are usually represented using an affine transform matrix,\ni.e. a linear 2x2 matrix plus a 2D translation. Vectormath chooses to lay out this data in a\nflat object structure, as opposed to an array or nested arrays, for ease of use and performance.\nThe field names used here match other standards, like the native DOMMatrix\nspecification and the Canvas reference APIs.\n\n```\n⎡a c e⎤\n⎣b d f⎦\n```\n\nPer usual linear algebra, multiplying a vector `v = (x, y)` according to this affine matrix is defined by:\n\n```\n⎡a c e⎤ ⎛x⎞   ⎛ax + cy + e⎞\n⎢b d f⎥ ⎜y⎟ = ⎜bx + dy + f⎟\n⎣0 0 1⎦ ⎝1⎠   ⎝     1     ⎠\n```\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link mat2x3Alloc}"
					},
					{
						"tag": "see",
						"text": "{@link mat2x3Reset}\n"
					}
				]
			},
			"children": [
				{
					"id": 24,
					"name": "a",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 1, row 1 component, usually called `m11` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 165,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 25,
					"name": "b",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 1, row 2 component, usually called `m12` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 170,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 26,
					"name": "c",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 2, row 1 component, usually called `m21` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 175,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 27,
					"name": "d",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 2, row 2 component, usually called `m22` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 180,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 28,
					"name": "e",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 3, row 1 component, usually called `tx` or `m41` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 185,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 29,
					"name": "f",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Col 3, row 2 component, usually called `ty` or `m42` in a 4x4 graphics matrix."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 190,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						24,
						25,
						26,
						27,
						28,
						29
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 161,
					"character": 24
				}
			]
		},
		{
			"id": 13,
			"name": "IRay",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent a ray in 2D space, i.e. an initial point in the plane plus a unit-length direction\nvector coming from that point.",
				"text": "The data representation of a ray and the similar {@link ILine} type is actually the same, but Vectormath chooses\nto export both names for clarity of usage. Functions that may interpret Rays and Lines differently will be\nnamed differently to prevent ambiguity,\nsuch as {@link polygonIntersectLineIterator} vs {@link polygonIntersectRayIterator}.\n\nWhere relevant, a ray is parameterized according to _t_ ≥ 0 with movement of distance _t_ along its direction vector.\nIn this mapping, _t_ = 0 represents the initial point (x0, y0).\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link rayAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link rayReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 16,
					"name": "dirX",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the direction vector of the ray.\nA ray's (dirX, dirY) direction vector is a unit vector emanating from its initial point."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 89,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 17,
					"name": "dirY",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the direction vector of the ray.\nA ray's (dirX, dirY) direction vector is a unit vector emanating from its initial point."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 95,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 14,
					"name": "x0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the ray's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 78,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 15,
					"name": "y0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the ray's initial point"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 83,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						16,
						17,
						14,
						15
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 74,
					"character": 21
				}
			]
		},
		{
			"id": 8,
			"name": "ISegment",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to represent a 2D line segment.",
				"text": "A segment object holds two (x, y) endpoints, representing the line segment connecting those points\nin the plane. Unlike the similar {@link IRay} and {@link ILine} types, a segment has finite length.\n\nFor a series of connected line segments, see the {@link IPolyline} data type.\n\nWhere relevant, a segment is parameterized according to linear interpolation\nbetween its endpoints, where _t_ = 0 represents its starting vertex and _t_ = 1 its\nending vertex.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link segmentAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link segmentReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 9,
					"name": "x0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the starting vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 41,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 11,
					"name": "x1",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the ending vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 51,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 10,
					"name": "y0",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the starting vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 46,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 12,
					"name": "y1",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the ending vertex of the segment."
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 56,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						9,
						11,
						10,
						12
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 37,
					"character": 25
				}
			]
		},
		{
			"id": 5,
			"name": "IVec",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Data type to hold an (x, y) value.",
				"text": "The vector type in the Vectormath package is used interchangeably to represent both points in the plane\nand vectors as in linear algebra.\n\nVectormath chooses to lay out the (x, y) values in a JavaScript object rather than an array\nfor ease of use. After carefully benchmarking that difference, it's been confirmed that this\ndoes not sacrifice performance or memory compactness.\n",
				"tags": [
					{
						"tag": "see",
						"text": "{@link vecAlloc}"
					},
					{
						"tag": "see",
						"text": "{@link vecReset}\n"
					}
				]
			},
			"children": [
				{
					"id": 6,
					"name": "x",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "x-coordinate of the vector"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 16,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 7,
					"name": "y",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "y-coordinate of the vector"
					},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 19,
							"character": 3
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						6,
						7
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 14,
					"character": 21
				}
			]
		},
		{
			"id": 41,
			"name": "IPolygon",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An alias for `number[]`. Data type to represent a polygon in the plane,\nas an interleaved sequence of vertex coordinates.",
				"text": "The `IPolygon` type is just an alias for an array of number values. For example,\na polygon with vertices v0, v1, v2, ..., vn is represented in Vectormath as the array:\n\n```\n[v0x, v0y, v1x, v1y, v2x, v2y, ..., vnx, vny]\n```\n\nUnlike the similar {@link IPolyline} type, a polygon's perimeter is always interpreted as a closed shape.\n\nWhere relevant, a polygon with _N_ sides is parameterized according to _t_ with linear interpolation between adjacent\nvertices by index, with a final segment connecting its last to its first vertex.\nFor example, _t_ = 3.5 represents the midpoint between the index 3 and index 4 vertex\nof the polygon (or the midpoint between the last and first vertex if _N_ = 4),\nand _t_ = 0 is its first vertex. The parameter _t_ is allowed to cycle indefinitely around the polygon's\nperimeter (i.e. _t_ = 0 and _t_ = N both map to the first vertex of the polygon),\nbut all methods that return _t_ values prefer the unique range [0, N).\n\nVectormath chooses to lay out this data in a flattened (interleaved) array, as opposed to e.g. an array of\nIVecs, for performance and more compact storage.\n"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 266,
					"character": 20
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "number"
				}
			}
		},
		{
			"id": 42,
			"name": "IPolyline",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "An alias for `number[]`. Data type to represent a sequence of connected line segments in the plane,\nas an interleaved array of vertex coordinates.",
				"text": "The `IPolyline` type is just an alias for an array of number values. For example,\na polyline connecting the points p0, p1, p2, ..., pn in space is represented in Vectormath as the array:\n\n```\n[p0x, p0y, p1x, p1y, p2x, p2y, ..., pnx, pny]\n```\n\nUnlike the similar {@link IPolygon} type, a polyline is not necessary closed.\n\nWhere relevant, a polyline with _N_ points is parameterized according to _t_ with linear interpolation between\nadjacent points by index. For example, _t_ = 3.5 represents the midpoint between the index 3 and index 4 point\nof the polyline, _t_ = 0 is its first point, and _t_ = _N_ is its final point. Any _t_ value falling\noutside of the range [0, _N_] is disallowed.\n\nVectormath chooses to lay out this data in a flattened (interleaved) array, as opposed to e.g. an array of\nIVecs, for performance and more compact storage.\n"
			},
			"sources": [
				{
					"fileName": "types.ts",
					"line": 289,
					"character": 21
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "number"
				}
			}
		},
		{
			"id": 2,
			"name": "OUT_MAX_X",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Sentinel value for the result of {@link boxComputeOutCode} to represent that\nthe point was outside the max-X edge of the box."
			},
			"sources": [
				{
					"fileName": "const.ts",
					"line": 12,
					"character": 22
				}
			],
			"type": {
				"type": "unknown",
				"name": "2"
			},
			"defaultValue": "2"
		},
		{
			"id": 4,
			"name": "OUT_MAX_Y",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Sentinel value for the result of {@link boxComputeOutCode} to represent that\nthe point was outside the max-Y edge of the box."
			},
			"sources": [
				{
					"fileName": "const.ts",
					"line": 24,
					"character": 22
				}
			],
			"type": {
				"type": "unknown",
				"name": "8"
			},
			"defaultValue": "8"
		},
		{
			"id": 1,
			"name": "OUT_MIN_X",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Sentinel value for the result of {@link boxComputeOutCode} to represent that\nthe point was outside the min-X edge of the box."
			},
			"sources": [
				{
					"fileName": "const.ts",
					"line": 6,
					"character": 22
				}
			],
			"type": {
				"type": "unknown",
				"name": "1"
			},
			"defaultValue": "1"
		},
		{
			"id": 3,
			"name": "OUT_MIN_Y",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Sentinel value for the result of {@link boxComputeOutCode} to represent that\nthe point was outside the min-Y edge of the box."
			},
			"sources": [
				{
					"fileName": "const.ts",
					"line": 18,
					"character": 22
				}
			],
			"type": {
				"type": "unknown",
				"name": "4"
			},
			"defaultValue": "4"
		},
		{
			"id": 43,
			"name": "boxAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 44,
					"name": "boxAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Box object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `boxAlloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = boxAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polygonGetBounds()`.\n   // This avoids a heap allocation.\n   const result = polygonGetBounds(existingObj.geometry, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxAlloc.ts",
					"line": 28,
					"character": 24
				}
			]
		},
		{
			"id": 52,
			"name": "boxClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 53,
					"name": "boxClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies values from an existing IBox into a new box.",
						"tags": [
							{
								"tag": "example",
								"text": "\n // make a copy of a given box\n const myBox = boxReset(-1, -1, 1, 1);\n const myBoxCopy = boxClone(myBox);\n\n // copy a given box into preallocated memory\n const TMP_BOX = boxAlloc();\n boxClone(myBox, TMP_BOX);\n"
							}
						]
					},
					"parameters": [
						{
							"id": 54,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "source to copy values from"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 55,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "destination box to copy values to\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxClone.ts",
					"line": 20,
					"character": 24
				}
			]
		},
		{
			"id": 56,
			"name": "boxComputeOutCode",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 57,
					"name": "boxComputeOutCode",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines where the specified point lies in relation to the given box.",
						"text": "The returned value is a binary OR of the possible values\n{@link OUT_MIN_X}, {@link OUT_MAX_X}, {@link OUT_MIN_Y}, and {@link OUT_MAX_Y}\nindicating, for each side, whether the point lies beyond that edge. If the point\nis inside the box, this function returns the value 0.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n const myBox = boxReset(-2, -2, 2, 2);\n const outCode1 = boxComputeOutCode(myBox, vecReset(-4, 4)); // returns OUT_MIN_X | OUT_MAX_Y\n const outCode2 = boxComputeOutCode(myBox, vec2Origin()); // returns 0"
							},
							{
								"tag": "see",
								"text": "OUT_MIN_X"
							},
							{
								"tag": "see",
								"text": "OUT_MAX_X"
							},
							{
								"tag": "see",
								"text": "OUT_MIN_Y"
							},
							{
								"tag": "see",
								"text": "OUT_MAX_Y\n"
							}
						]
					},
					"parameters": [
						{
							"id": 58,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 59,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxComputeOutCode.ts",
					"line": 24,
					"character": 33
				}
			]
		},
		{
			"id": 60,
			"name": "boxContainsBox",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 61,
					"name": "boxContainsBox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether the second box is completely enclosed in the first.",
						"text": "Returns true if the second box is contained in the first.\nEach box is treated as a closed area, so e.g. the two boxes may share\nan edge and the containment check would still pass.\n"
					},
					"parameters": [
						{
							"id": 62,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 63,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxContainsBox.ts",
					"line": 13,
					"character": 30
				}
			]
		},
		{
			"id": 64,
			"name": "boxContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 65,
					"name": "boxContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether the box contains a given point.",
						"text": "Checks whether the point is inside the box's enclosed region.\nThe box is treated as a closed area,\nso points on the boundary of the box will return true.\n"
					},
					"parameters": [
						{
							"id": 66,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 67,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxContainsPoint.ts",
					"line": 13,
					"character": 32
				}
			]
		},
		{
			"id": 68,
			"name": "boxEncapsulate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 69,
					"name": "boxEncapsulate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Grows the box to include a given point.",
						"text": "Extends the box's bounding edges, if needed, to encapsulate the given point.\nIf the point is already inside the box, this function does nothing.\n"
					},
					"parameters": [
						{
							"id": 70,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to potentially grow"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 71,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the point that the box should grow to include"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 72,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxEncapsulate.ts",
					"line": 15,
					"character": 30
				}
			]
		},
		{
			"id": 73,
			"name": "boxIntersection",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 74,
					"name": "boxIntersection",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the area intersection of the two box regions.",
						"text": "Given two boxes, this function computes the region where they overlap.\nIf the two boxes do not overlap,\nthe returned value will be an empty box, i.e. with `maxX < minX` or `maxY < minY`.\n\nThe similar function {@link boxIntersectsBox} will check whether two\nboxes intersect, without actually computing that intersection region.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link boxUnion}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 75,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "first box to compute intersection for"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 76,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "second box to compute intersection for"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 77,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxIntersection.ts",
					"line": 20,
					"character": 31
				}
			]
		},
		{
			"id": 78,
			"name": "boxIntersectsBox",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 79,
					"name": "boxIntersectsBox",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether two boxes overlap.",
						"text": "This function checks whether the two boxes intersect, as areas. Both boxes are treated as closed\nregions, so e.g. this function will return true if the boxes share only a single edge.\n\nThe similar function {@link boxIntersection} can compute the overlap region.\n"
					},
					"parameters": [
						{
							"id": 80,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "first box to check for overlap"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 81,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "second box to check for overlap\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxIntersectsBox.ts",
					"line": 14,
					"character": 32
				}
			]
		},
		{
			"id": 82,
			"name": "boxIsEmpty",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 83,
					"name": "boxIsEmpty",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Determines whether this box represents an empty area.",
						"text": "A box is considered empty if its `maxX` is less than its `minX` or its `maxY` is less than its `minY`.\n\nThis function handles `Infinity`, `-Infinity`, and `NaN` values:\n- Any box that contains a NaN edge is considered empty\n- Edges with non-finite values are compared according to normal mathematical rules, so e.g. the\n   [-∞, +∞]×[-∞, +∞] box is NOT empty, but the [+∞, -∞]×[-1, 1] box IS empty.\n"
					},
					"parameters": [
						{
							"id": 84,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxIsEmpty.ts",
					"line": 15,
					"character": 26
				}
			]
		},
		{
			"id": 45,
			"name": "boxReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 46,
					"name": "boxReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new box given `minX`, `minY`, `maxX`, and `maxY` bounding values.",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize a new box that's [-1, 1]×[-1, 1]\n const myBox = boxReset(-1, -1, 1, 1);\n\n // reset an existing box's values to [4, 8]×[0, 8]\n const myBox2 = boxAlloc();\n boxReset(4, 0, 8, 8, myBox2);\n"
							}
						]
					},
					"parameters": [
						{
							"id": 47,
							"name": "minX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n min-X boundary of the box, which is typically the _left_ edge"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 48,
							"name": "minY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n min-Y boundary of the box, which could be the _top_ OR the _bottom_ edge of the box depending on how your\n rendering and coordinate systems are laid out."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 49,
							"name": "maxX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n max-X boundary of the box, which is typically the _right_ edge"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 50,
							"name": "maxY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n min-Y boundary of the box, which could be the _top_ OR the _bottom_ edge of the box depending on how your\n rendering and coordinate systems are laid out."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 51,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxReset.ts",
					"line": 25,
					"character": 24
				}
			]
		},
		{
			"id": 108,
			"name": "boxTransformByAff",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 109,
					"name": "boxTransformByAff",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Compute the bounds of the image of this box after applying a 2D affine transformation.",
						"text": "This function calculates the minimum bounds that will contain the image after applying a transformation\nto the given bounding box. Note that the actual geometric result of transforming a given\nbox may not be an axis-aligned box! For example, spinning the [-1, 1]×[-1, 1] box 45° clockwise yields a diamond\nconnecting the four points (√2, 0), (0, √2), (-√2, 0), (0, -√2). The bounding box of _that diamond_\nis [-√2, √2]×[-√2, √2].\n"
					},
					"parameters": [
						{
							"id": 110,
							"name": "box",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the box to transform"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 111,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the affine transformation to apply to the box"
							},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 112,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxTransformByAff.ts",
					"line": 23,
					"character": 33
				}
			]
		},
		{
			"id": 113,
			"name": "boxUnion",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 114,
					"name": "boxUnion",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Compute the smallest bounding box that contains both given boxes.",
						"text": "For example, if one box contains the other, this method returns the larger box.\nIf the two boxes don't intersect, this method returns a bounding region that covers both boxes.\n"
					},
					"parameters": [
						{
							"id": 115,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 116,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							}
						},
						{
							"id": 117,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "boxFunctions/boxUnion.ts",
					"line": 15,
					"character": 24
				}
			]
		},
		{
			"id": 148,
			"name": "intersectionAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 149,
					"name": "intersectionAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Intersection object in memory, with all values initialized to `false` and `NaN`.\nThis is useful to hold the result of vectormath function calls in performance\ncritical workflows."
					},
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "intersectionFunctions/intersectionAlloc.ts",
					"line": 12,
					"character": 33
				}
			]
		},
		{
			"id": 561,
			"name": "intersectionClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 562,
					"name": "intersectionClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given intersection into a new intersection object."
					},
					"parameters": [
						{
							"id": 563,
							"name": "intersection",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						},
						{
							"id": 564,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "intersectionFunctions/intersectionClone.ts",
					"line": 10,
					"character": 33
				}
			]
		},
		{
			"id": 150,
			"name": "intersectionReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 151,
					"name": "intersectionReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new intersection given `exists`, `x`, `y`, `t0`, and `t1` values."
					},
					"parameters": [
						{
							"id": 152,
							"name": "exists",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 153,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 154,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 155,
							"name": "t0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 156,
							"name": "t1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 157,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "intersectionFunctions/intersectionReset.ts",
					"line": 12,
					"character": 33
				}
			]
		},
		{
			"id": 118,
			"name": "lineAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 119,
					"name": "lineAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Line object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like lineAlloc() are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n  // initialize temp memory\n const TMP0 = lineAlloc();\n\n ... {\n   // Use this temp memory to hold the result of `lineThroughPoints()`.\n   // This avoids a heap allocation.\n   const result = lineThroughPoints(existingObj.from, existingObj.to, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineAlloc.ts",
					"line": 28,
					"character": 25
				}
			]
		},
		{
			"id": 127,
			"name": "lineClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 128,
					"name": "lineClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 129,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 130,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineClone.ts",
					"line": 5,
					"character": 25
				}
			]
		},
		{
			"id": 131,
			"name": "lineClosestDistanceToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 132,
					"name": "lineClosestDistanceToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 133,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 134,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineClosestDistanceToPoint.ts",
					"line": 4,
					"character": 42
				}
			]
		},
		{
			"id": 135,
			"name": "lineClosestSignedDistanceToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 136,
					"name": "lineClosestSignedDistanceToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 137,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 138,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineClosestSignedDistanceToPoint.ts",
					"line": 4,
					"character": 48
				}
			]
		},
		{
			"id": 139,
			"name": "lineContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 140,
					"name": "lineContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 141,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 142,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineContainsPoint.ts",
					"line": 5,
					"character": 33
				}
			]
		},
		{
			"id": 143,
			"name": "lineGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 144,
					"name": "lineGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 145,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 146,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 147,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineGetPointAt.ts",
					"line": 5,
					"character": 30
				}
			]
		},
		{
			"id": 169,
			"name": "lineIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 170,
					"name": "lineIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 171,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 172,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 173,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectLine.ts",
					"line": 18,
					"character": 33
				}
			]
		},
		{
			"id": 204,
			"name": "lineIntersectPolylineIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 205,
					"name": "lineIntersectPolylineIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 206,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 207,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectPolylineIterator.ts",
					"line": 6,
					"character": 45
				}
			]
		},
		{
			"id": 208,
			"name": "lineIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 209,
					"name": "lineIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 210,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 211,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 212,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectRay.ts",
					"line": 6,
					"character": 32
				}
			]
		},
		{
			"id": 194,
			"name": "lineIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 195,
					"name": "lineIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 196,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 197,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 198,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineIntersectSegment.ts",
					"line": 11,
					"character": 36
				}
			]
		},
		{
			"id": 213,
			"name": "lineProjectPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 214,
					"name": "lineProjectPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 215,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 216,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 217,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineProjectPoint.ts",
					"line": 6,
					"character": 32
				}
			]
		},
		{
			"id": 120,
			"name": "lineReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 121,
					"name": "lineReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 122,
							"name": "x0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 123,
							"name": "y0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 124,
							"name": "dirX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 125,
							"name": "dirY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 126,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineReset.ts",
					"line": 3,
					"character": 25
				}
			]
		},
		{
			"id": 218,
			"name": "lineThroughPoints",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 219,
					"name": "lineThroughPoints",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 220,
							"name": "from",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 221,
							"name": "to",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 222,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineThroughPoints.ts",
					"line": 5,
					"character": 33
				}
			]
		},
		{
			"id": 223,
			"name": "lineTransformByAff",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 224,
					"name": "lineTransformByAff",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 225,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 226,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 227,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							},
							"defaultValue": " lineAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineTransformByAff.ts",
					"line": 11,
					"character": 34
				}
			]
		},
		{
			"id": 228,
			"name": "lineWhichSide",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 229,
					"name": "lineWhichSide",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 230,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 231,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "lineFunctions/lineWhichSide.ts",
					"line": 5,
					"character": 29
				}
			]
		},
		{
			"id": 232,
			"name": "mat2x3AffDeterminant",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 233,
					"name": "mat2x3AffDeterminant",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 234,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffDeterminant.ts",
					"line": 3,
					"character": 36
				}
			]
		},
		{
			"id": 235,
			"name": "mat2x3AffFromRotation",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 236,
					"name": "mat2x3AffFromRotation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 237,
							"name": "theta",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 238,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffFromRotation.ts",
					"line": 4,
					"character": 37
				}
			]
		},
		{
			"id": 239,
			"name": "mat2x3AffFromTranslation",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 240,
					"name": "mat2x3AffFromTranslation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 241,
							"name": "tx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 242,
							"name": "ty",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 243,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffFromTranslation.ts",
					"line": 4,
					"character": 40
				}
			]
		},
		{
			"id": 244,
			"name": "mat2x3AffIdentity",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 245,
					"name": "mat2x3AffIdentity",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 246,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffIdentity.ts",
					"line": 4,
					"character": 33
				}
			]
		},
		{
			"id": 247,
			"name": "mat2x3AffInvert",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 248,
					"name": "mat2x3AffInvert",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 249,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 250,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffInvert.ts",
					"line": 6,
					"character": 31
				}
			]
		},
		{
			"id": 251,
			"name": "mat2x3AffIsOrthogonal",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 252,
					"name": "mat2x3AffIsOrthogonal",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 253,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffIsOrthogonal.ts",
					"line": 4,
					"character": 37
				}
			]
		},
		{
			"id": 254,
			"name": "mat2x3AffIsTranslationOnly",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 255,
					"name": "mat2x3AffIsTranslationOnly",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 256,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffIsTranslationOnly.ts",
					"line": 3,
					"character": 42
				}
			]
		},
		{
			"id": 257,
			"name": "mat2x3AffMulMat2x3",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 258,
					"name": "mat2x3AffMulMat2x3",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 259,
							"name": "m1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 260,
							"name": "m2",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 261,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffMulMat2x3.ts",
					"line": 5,
					"character": 34
				}
			]
		},
		{
			"id": 262,
			"name": "mat2x3AffRotate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 263,
					"name": "mat2x3AffRotate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 264,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 265,
							"name": "theta",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 266,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffRotate.ts",
					"line": 5,
					"character": 31
				}
			]
		},
		{
			"id": 267,
			"name": "mat2x3AffScale",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 268,
					"name": "mat2x3AffScale",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 269,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 270,
							"name": "scalar",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 271,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffScale.ts",
					"line": 5,
					"character": 30
				}
			]
		},
		{
			"id": 272,
			"name": "mat2x3AffTranslate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 273,
					"name": "mat2x3AffTranslate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 274,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 275,
							"name": "tx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 276,
							"name": "ty",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 277,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3AffTranslate.ts",
					"line": 5,
					"character": 34
				}
			]
		},
		{
			"id": 158,
			"name": "mat2x3Alloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 159,
					"name": "mat2x3Alloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Mat2x3 object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `mat2x3Alloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = mat2x3Alloc();\n\n ... {\n   // Use this temp memory to hold result of `mat2x3AffInvert()`.\n   // This avoids a heap allocation.\n   const result = mat2x3AffInvert(existingObj.transform, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3Alloc.ts",
					"line": 28,
					"character": 27
				}
			]
		},
		{
			"id": 278,
			"name": "mat2x3Clone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 279,
					"name": "mat2x3Clone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 280,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 281,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3Clone.ts",
					"line": 5,
					"character": 27
				}
			]
		},
		{
			"id": 160,
			"name": "mat2x3Reset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 161,
					"name": "mat2x3Reset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 162,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 163,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 164,
							"name": "c",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 165,
							"name": "d",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 166,
							"name": "e",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 167,
							"name": "f",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 168,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							},
							"defaultValue": " mat2x3Alloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IMat2x3",
						"id": 23
					}
				}
			],
			"sources": [
				{
					"fileName": "mat2x3Functions/mat2x3Reset.ts",
					"line": 3,
					"character": 27
				}
			]
		},
		{
			"id": 282,
			"name": "polygonAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 283,
					"name": "polygonAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Array object in memory to hold Polygon data.\nIts initial length is 0.",
						"text": "Data allocation functions like `polygonAlloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = polygonAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polygonTransformByAff()`.\n   // This will avoid a heap allocation if the array doesn't have to be resized.\n   const result = polygonTransformByAff(existingObj.geometry, existingObj.transform, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IPolygon",
						"id": 41
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonAlloc.ts",
					"line": 25,
					"character": 28
				}
			]
		},
		{
			"id": 284,
			"name": "polygonContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 285,
					"name": "polygonContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 286,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 287,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonContainsPoint.ts",
					"line": 3,
					"character": 36
				}
			]
		},
		{
			"id": 288,
			"name": "polygonGetBounds",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 289,
					"name": "polygonGetBounds",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 290,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 291,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetBounds.ts",
					"line": 5,
					"character": 32
				}
			]
		},
		{
			"id": 292,
			"name": "polygonGetNumSides",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 293,
					"name": "polygonGetNumSides",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 294,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetNumSides.ts",
					"line": 3,
					"character": 34
				}
			]
		},
		{
			"id": 309,
			"name": "polygonGetPerimeter",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 310,
					"name": "polygonGetPerimeter",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 311,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetPerimeter.ts",
					"line": 5,
					"character": 35
				}
			]
		},
		{
			"id": 312,
			"name": "polygonGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 313,
					"name": "polygonGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 314,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 315,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 316,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetPointAt.ts",
					"line": 6,
					"character": 33
				}
			]
		},
		{
			"id": 317,
			"name": "polygonGetSideLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 318,
					"name": "polygonGetSideLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 319,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 320,
							"name": "idx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetSideLength.ts",
					"line": 5,
					"character": 36
				}
			]
		},
		{
			"id": 321,
			"name": "polygonGetSideSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 322,
					"name": "polygonGetSideSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 323,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 324,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 325,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 8
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonGetSideSegment.ts",
					"line": 5,
					"character": 37
				}
			]
		},
		{
			"id": 326,
			"name": "polygonIntersectLineIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 327,
					"name": "polygonIntersectLineIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 328,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 329,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonIntersectLineIterator.ts",
					"line": 5,
					"character": 44
				}
			]
		},
		{
			"id": 340,
			"name": "polygonIntersectRayIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 341,
					"name": "polygonIntersectRayIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 342,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 343,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonIntersectRayIterator.ts",
					"line": 5,
					"character": 43
				}
			]
		},
		{
			"id": 349,
			"name": "polygonIntersectSegmentIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 350,
					"name": "polygonIntersectSegmentIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 351,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 352,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonIntersectSegmentIterator.ts",
					"line": 5,
					"character": 47
				}
			]
		},
		{
			"id": 374,
			"name": "polygonNearestPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 375,
					"name": "polygonNearestPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 376,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 377,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 378,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonNearestPoint.ts",
					"line": 6,
					"character": 35
				}
			]
		},
		{
			"id": 370,
			"name": "polygonNearestT",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 371,
					"name": "polygonNearestT",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 372,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 373,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonNearestT.ts",
					"line": 7,
					"character": 31
				}
			]
		},
		{
			"id": 383,
			"name": "polygonNearestVertexIndex",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 384,
					"name": "polygonNearestVertexIndex",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 385,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 386,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonNearestVertexIndex.ts",
					"line": 4,
					"character": 41
				}
			]
		},
		{
			"id": 387,
			"name": "polygonTransformByAff",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 388,
					"name": "polygonTransformByAff",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 389,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolygon",
								"id": 41
							}
						},
						{
							"id": 390,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 391,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polygonAlloc()"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polygonFunctions/polygonTransformByAff.ts",
					"line": 5,
					"character": 37
				}
			]
		},
		{
			"id": 85,
			"name": "polylineAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 86,
					"name": "polylineAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Array object in memory to hold Polyline data.\nIts initial length is 0.",
						"text": "Data allocation functions like `polylineAlloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = polylineAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polylineTransformByAff()`.\n   // This will avoid a heap allocation if the array doesn't have to be resized.\n   const result = polylineTransformByAff(existingObj.path, existingObj.transform, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IPolyline",
						"id": 42
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineAlloc.ts",
					"line": 25,
					"character": 29
				}
			]
		},
		{
			"id": 295,
			"name": "polylineClose",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 296,
					"name": "polylineClose",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Repeats the polyline's first vertex to form a closed path."
					},
					"parameters": [
						{
							"id": 297,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 298,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polylineAlloc()"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineClose.ts",
					"line": 10,
					"character": 29
				}
			]
		},
		{
			"id": 94,
			"name": "polylineGetBounds",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 95,
					"name": "polylineGetBounds",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes bounding box of polyline's geometry"
					},
					"parameters": [
						{
							"id": 96,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 97,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IBox",
								"id": 30
							},
							"defaultValue": " boxAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IBox",
						"id": 30
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetBounds.ts",
					"line": 16,
					"character": 33
				}
			]
		},
		{
			"id": 306,
			"name": "polylineGetLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 307,
					"name": "polylineGetLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes total length of polyline"
					},
					"parameters": [
						{
							"id": 308,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetLength.ts",
					"line": 10,
					"character": 33
				}
			]
		},
		{
			"id": 174,
			"name": "polylineGetNumSegments",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 175,
					"name": "polylineGetNumSegments",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the number of individual line segments in this polyline",
						"text": "This function computes the number of line segments represented by this polyline,\nwhich is always `Math.max(0, poly.length / 2 - 1)`. This function makes no effort to identify and filter\n\"trivial\" or \"empty\" segments that may exist along its path.\n"
					},
					"parameters": [
						{
							"id": 176,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetNumSegments.ts",
					"line": 12,
					"character": 38
				}
			]
		},
		{
			"id": 392,
			"name": "polylineGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 393,
					"name": "polylineGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Gets a point along the polyline, parameterized according to linear interpolation between\nadjacent vertices.",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolyline}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 394,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 395,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 396,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetPointAt.ts",
					"line": 16,
					"character": 34
				}
			]
		},
		{
			"id": 186,
			"name": "polylineGetSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 187,
					"name": "polylineGetSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a polyline's segment by given index, starting at 0."
					},
					"parameters": [
						{
							"id": 188,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 189,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 190,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 8
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetSegment.ts",
					"line": 12,
					"character": 34
				}
			]
		},
		{
			"id": 302,
			"name": "polylineGetSegmentLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 303,
					"name": "polylineGetSegmentLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the length of one of a polyline's segments by index, starting at 0."
					},
					"parameters": [
						{
							"id": 304,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 305,
							"name": "idx",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetSegmentLength.ts",
					"line": 9,
					"character": 40
				}
			]
		},
		{
			"id": 397,
			"name": "polylineGetVertex",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 398,
					"name": "polylineGetVertex",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieves a vertex from this polyline's geometry, starting at index 0"
					},
					"parameters": [
						{
							"id": 399,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 400,
							"name": "index",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 401,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineGetVertex.ts",
					"line": 12,
					"character": 33
				}
			]
		},
		{
			"id": 402,
			"name": "polylineIntersectLineIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 403,
					"name": "polylineIntersectLineIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polyline crosses a given line.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polyline's geometry\naccording to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count, and smooth values of _t0_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one traveled from the polyline's start to its end\nalong its segment geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IIntersection}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolylineIterator}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectRayIterator}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectSegmentIterator}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 404,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 405,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIntersectLineIterator.ts",
					"line": 25,
					"character": 45
				}
			]
		},
		{
			"id": 406,
			"name": "polylineIntersectRayIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 407,
					"name": "polylineIntersectRayIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polyline crosses a given ray.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polyline's geometry\naccording to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count, and smooth values of _t0_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one traveled from the polyline's start to its end\nalong its segment geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IIntersection}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolylineIterator}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectLineIterator}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectSegmentIterator}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 408,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 409,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIntersectRayIterator.ts",
					"line": 25,
					"character": 44
				}
			]
		},
		{
			"id": 410,
			"name": "polylineIntersectSegmentIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 411,
					"name": "polylineIntersectSegmentIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes all locations at which a polyline crosses a given line segment.",
						"text": "For each returned intersection, the intersection's _t0_ describes where the point fell on the polyline's geometry\naccording to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count, and smooth values of _t0_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nThe returned points will be sorted by _t0_ increasing, i.e. they will be sorted according to the\norder in which one would visit those locations if one traveled from the polyline's start to its end\nalong its segment geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IIntersection}"
							},
							{
								"tag": "see",
								"text": "{@link IPolyline}"
							},
							{
								"tag": "see",
								"text": "{@link lineIntersectPolylineIterator}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectLineIterator}"
							},
							{
								"tag": "see",
								"text": "{@link polylineIntersectRayIterator}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 412,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 413,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIntersectSegmentIterator.ts",
					"line": 25,
					"character": 48
				}
			]
		},
		{
			"id": 299,
			"name": "polylineIsClosed",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 300,
					"name": "polylineIsClosed",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns whether the polyline's last vertex equals its first",
						"text": "Computes whether the polyline forms a closed shape, i.e. its last vertex\nis the same as its first. As a special case, the empty polyline `[]` is\nconsidered closed.\n"
					},
					"parameters": [
						{
							"id": 301,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineIsClosed.ts",
					"line": 13,
					"character": 32
				}
			]
		},
		{
			"id": 414,
			"name": "polylineNearestPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 415,
					"name": "polylineNearestPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the closest point that the polyline comes to a given reference point"
					},
					"parameters": [
						{
							"id": 416,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 417,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 418,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineNearestPoint.ts",
					"line": 13,
					"character": 36
				}
			]
		},
		{
			"id": 366,
			"name": "polylineNearestT",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 367,
					"name": "polylineNearestT",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the closest location at which the polyline comes to a given reference point.",
						"text": "The returned value _t_ is defined according to the {@link IPolyline} parameterization:\nvalues of _t0_ are between 0 and the polyline's vertex count, and smooth values of T\nsignify linear interpolation between the two adjacent vertices along the polyline's geometry.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link IPolyline}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 368,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 369,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineNearestT.ts",
					"line": 25,
					"character": 32
				}
			]
		},
		{
			"id": 379,
			"name": "polylineNearestVertexIndex",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 380,
					"name": "polylineNearestVertexIndex",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the index of the nearest vertex of the polyline to a given reference point"
					},
					"parameters": [
						{
							"id": 381,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 382,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineNearestVertexIndex.ts",
					"line": 15,
					"character": 42
				}
			]
		},
		{
			"id": 103,
			"name": "polylineTransformByAff",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 104,
					"name": "polylineTransformByAff",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Transforms a polyline by an affine matrix.",
						"text": "Simply transforms each of the polyline's vertices by the given matrix.\nAffine transformations and their specifics within Vectormath are described in more detail\nin the {@link vecTransformByAff} docs.\n",
						"tags": [
							{
								"tag": "see",
								"text": "{@link vecTransformByAff}"
							},
							{
								"tag": "see",
								"text": "{@link IMat2x3}\n"
							}
						]
					},
					"parameters": [
						{
							"id": 105,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 106,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 107,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polylineAlloc()"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineTransformByAff.ts",
					"line": 22,
					"character": 38
				}
			]
		},
		{
			"id": 419,
			"name": "polylineTrim",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 420,
					"name": "polylineTrim",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Trims a polyline to a range of its _t_ parameter.",
						"text": "This function trims geometry from either or both ends of the polyline, kind of like a \"substring\"\noperation. Note that fractional values are allowed on the bounding _t_ parameters, which may slice off\nonly parts of segments to form new vertices.\n\nA polyline's parameterization is defined according to _t_, where\nvalues of _t_ are between 0 and the polyline's vertex count, and smooth values of _t_ therein\nsignify linear interpolation between adjacent vertices along the polyline's geometry.\n\nBoth the `minT` and `maxT` parameters will be clamped to their allowed domains [0, _N_-1] for a\npolyline of _N_ vertices.\n"
					},
					"parameters": [
						{
							"id": 421,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "the polyline to trim"
							},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						},
						{
							"id": 422,
							"name": "tStart",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "minimum _t_ value to include. The resulting polyline will have its last vertex at\n the point described by this value on the original polyline. Internally, this value will be clamped\n to the allowed domain `[0, poly.length/2 - 1]`."
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 423,
							"name": "tEnd",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 424,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							},
							"defaultValue": " polylineAlloc()"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "polylineFunctions/polylineTrim.ts",
					"line": 33,
					"character": 28
				}
			]
		},
		{
			"id": 425,
			"name": "rayAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 426,
					"name": "rayAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Ray object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `rayAlloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = rayAlloc();\n\n ... {\n   // Use this temp memory to hold result of `rayLookAt()`.\n   // This avoids a heap allocation.\n   const result = rayLookAt(existingObj.source, existingObj.target, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IRay",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayAlloc.ts",
					"line": 28,
					"character": 24
				}
			]
		},
		{
			"id": 434,
			"name": "rayClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 435,
					"name": "rayClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 436,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 437,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IRay",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayClone.ts",
					"line": 5,
					"character": 24
				}
			]
		},
		{
			"id": 438,
			"name": "rayContainsPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 439,
					"name": "rayContainsPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 440,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 441,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayContainsPoint.ts",
					"line": 6,
					"character": 32
				}
			]
		},
		{
			"id": 446,
			"name": "rayGetClosestDistanceToPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 447,
					"name": "rayGetClosestDistanceToPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 448,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 449,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayGetClosestDistanceToPoint.ts",
					"line": 11,
					"character": 44
				}
			]
		},
		{
			"id": 455,
			"name": "rayGetClosestPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 456,
					"name": "rayGetClosestPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 457,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 458,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 459,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayGetClosestPoint.ts",
					"line": 6,
					"character": 34
				}
			]
		},
		{
			"id": 450,
			"name": "rayGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 451,
					"name": "rayGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 452,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 453,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 454,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayGetPointAt.ts",
					"line": 5,
					"character": 29
				}
			]
		},
		{
			"id": 460,
			"name": "rayIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 461,
					"name": "rayIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 462,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 463,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 464,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectLine.ts",
					"line": 6,
					"character": 32
				}
			]
		},
		{
			"id": 465,
			"name": "rayIntersectPolylineIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 466,
					"name": "rayIntersectPolylineIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 467,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 468,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectPolylineIterator.ts",
					"line": 6,
					"character": 44
				}
			]
		},
		{
			"id": 469,
			"name": "rayIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 470,
					"name": "rayIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 471,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 472,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 473,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectRay.ts",
					"line": 7,
					"character": 31
				}
			]
		},
		{
			"id": 330,
			"name": "rayIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 331,
					"name": "rayIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 332,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 333,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 334,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayIntersectSegment.ts",
					"line": 12,
					"character": 35
				}
			]
		},
		{
			"id": 474,
			"name": "rayLookAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 475,
					"name": "rayLookAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 476,
							"name": "from",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 477,
							"name": "to",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 478,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayLookAt.ts",
					"line": 5,
					"character": 25
				}
			]
		},
		{
			"id": 427,
			"name": "rayReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 428,
					"name": "rayReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 429,
							"name": "x0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 430,
							"name": "y0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 431,
							"name": "dirX",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 432,
							"name": "dirY",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 433,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IRay",
						"id": 13
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayReset.ts",
					"line": 3,
					"character": 24
				}
			]
		},
		{
			"id": 479,
			"name": "rayTransformByAff",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 480,
					"name": "rayTransformByAff",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 481,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 482,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 483,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							},
							"defaultValue": " rayAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ILine",
						"id": 18
					}
				}
			],
			"sources": [
				{
					"fileName": "rayFunctions/rayTransformByAff.ts",
					"line": 5,
					"character": 33
				}
			]
		},
		{
			"id": 177,
			"name": "segmentAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 178,
					"name": "segmentAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Segment object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `segmentAlloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = segmentAlloc();\n\n ... {\n   // Use this temp memory to hold result of `polygonGetSideSegment()`.\n   // This avoids a heap allocation.\n   const result = polygonGetSideSegment(existingObj.geometry, 0, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 8
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentAlloc.ts",
					"line": 28,
					"character": 28
				}
			]
		},
		{
			"id": 484,
			"name": "segmentGetEndpoint0",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 485,
					"name": "segmentGetEndpoint0",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 486,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 487,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetEndpoint0.ts",
					"line": 5,
					"character": 35
				}
			]
		},
		{
			"id": 488,
			"name": "segmentGetEndpoint1",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 489,
					"name": "segmentGetEndpoint1",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 490,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 491,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetEndpoint1.ts",
					"line": 5,
					"character": 35
				}
			]
		},
		{
			"id": 191,
			"name": "segmentGetLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 192,
					"name": "segmentGetLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 193,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetLength.ts",
					"line": 3,
					"character": 32
				}
			]
		},
		{
			"id": 492,
			"name": "segmentGetLengthSq",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 493,
					"name": "segmentGetLengthSq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 494,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetLengthSq.ts",
					"line": 3,
					"character": 34
				}
			]
		},
		{
			"id": 353,
			"name": "segmentGetPointAt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 354,
					"name": "segmentGetPointAt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 355,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 356,
							"name": "t",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 357,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentGetPointAt.ts",
					"line": 5,
					"character": 33
				}
			]
		},
		{
			"id": 199,
			"name": "segmentIntersectLine",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 200,
					"name": "segmentIntersectLine",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 201,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 202,
							"name": "line",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ILine",
								"id": 18
							}
						},
						{
							"id": 203,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectLine.ts",
					"line": 6,
					"character": 36
				}
			]
		},
		{
			"id": 495,
			"name": "segmentIntersectPolylineIterator",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 496,
					"name": "segmentIntersectPolylineIterator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 497,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 498,
							"name": "poly",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IPolyline",
								"id": 42
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "IterableIterator",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectPolylineIterator.ts",
					"line": 6,
					"character": 48
				}
			]
		},
		{
			"id": 335,
			"name": "segmentIntersectRay",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 336,
					"name": "segmentIntersectRay",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 337,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 338,
							"name": "ray",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IRay",
								"id": 13
							}
						},
						{
							"id": 339,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectRay.ts",
					"line": 6,
					"character": 35
				}
			]
		},
		{
			"id": 344,
			"name": "segmentIntersectSegment",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 345,
					"name": "segmentIntersectSegment",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 346,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 347,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 348,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IIntersection",
								"id": 35
							},
							"defaultValue": " intersectionAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IIntersection",
						"id": 35
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentIntersectSegment.ts",
					"line": 12,
					"character": 39
				}
			]
		},
		{
			"id": 499,
			"name": "segmentNearestPoint",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 500,
					"name": "segmentNearestPoint",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 501,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 502,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 503,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentNearestPoint.ts",
					"line": 6,
					"character": 35
				}
			]
		},
		{
			"id": 358,
			"name": "segmentNearestT",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 359,
					"name": "segmentNearestT",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 360,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 361,
							"name": "point",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentNearestT.ts",
					"line": 5,
					"character": 31
				}
			]
		},
		{
			"id": 179,
			"name": "segmentReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 180,
					"name": "segmentReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 181,
							"name": "x0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 182,
							"name": "y0",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 183,
							"name": "x1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 184,
							"name": "y1",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 185,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 8
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentReset.ts",
					"line": 3,
					"character": 28
				}
			]
		},
		{
			"id": 504,
			"name": "segmentReverse",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 505,
					"name": "segmentReverse",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 506,
							"name": "segment",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							}
						},
						{
							"id": 507,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ISegment",
								"id": 8
							},
							"defaultValue": " segmentAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "ISegment",
						"id": 8
					}
				}
			],
			"sources": [
				{
					"fileName": "segmentFunctions/segmentReverse.ts",
					"line": 5,
					"character": 30
				}
			]
		},
		{
			"id": 508,
			"name": "vecAdd",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 509,
					"name": "vecAdd",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the result of adding the two given vectors."
					},
					"parameters": [
						{
							"id": 510,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 511,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 512,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecAdd.ts",
					"line": 12,
					"character": 22
				}
			]
		},
		{
			"id": 87,
			"name": "vecAlloc",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 88,
					"name": "vecAlloc",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Creates a new Vec object in memory, with all values initialized to `NaN`.",
						"text": "Data allocation functions like `vecAlloc()` are useful to hold results of\nVectormath function calls in inner loops of performance critical workflows.\n\nAs with any optimization, you don't need it until you've profiled your\napplication! Getting into temp variable management and shared state can\nseverely hurt code readability and maintainability, so it's best to avoid\nsuch optimization if you can.\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n // initialize temp memory\n const TMP0 = vecAlloc();\n\n ... {\n   // Use this temp memory to hold result of `vecNormalize()`.\n   // This avoids a heap allocation.\n   const result = vecNormalize(existingObj.velocity, TMP0);\n }\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecAlloc.ts",
					"line": 28,
					"character": 24
				}
			]
		},
		{
			"id": 513,
			"name": "vecClone",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 514,
					"name": "vecClone",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Copies the values from the given vector into a new vector."
					},
					"parameters": [
						{
							"id": 515,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 516,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecClone.ts",
					"line": 11,
					"character": 24
				}
			]
		},
		{
			"id": 442,
			"name": "vecDistance",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 443,
					"name": "vecDistance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the straight-line (Euclidean) distance between the two vectors, interpreted as points in the plane."
					},
					"parameters": [
						{
							"id": 444,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 445,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecDistance.ts",
					"line": 9,
					"character": 27
				}
			]
		},
		{
			"id": 362,
			"name": "vecDistanceSq",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 363,
					"name": "vecDistanceSq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the squared straight-line (i.e. Euclidean) distance between the two vectors, interpreted as points in the plane."
					},
					"parameters": [
						{
							"id": 364,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 365,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecDistanceSq.ts",
					"line": 8,
					"character": 29
				}
			]
		},
		{
			"id": 517,
			"name": "vecDot",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 518,
					"name": "vecDot",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the dot product of the two vectors, i.e. `a.x * b.x + a.y * b.y`."
					},
					"parameters": [
						{
							"id": 519,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 520,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecDot.ts",
					"line": 9,
					"character": 22
				}
			]
		},
		{
			"id": 521,
			"name": "vecGetLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 522,
					"name": "vecGetLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the straight-line length (i.e. Euclidean norm) of the given vector."
					},
					"parameters": [
						{
							"id": 523,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecGetLength.ts",
					"line": 8,
					"character": 28
				}
			]
		},
		{
			"id": 524,
			"name": "vecGetLengthSq",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 525,
					"name": "vecGetLengthSq",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the squared straight-line length (i.e. square of the Euclidean norm) of the given vector."
					},
					"parameters": [
						{
							"id": 526,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecGetLengthSq.ts",
					"line": 8,
					"character": 30
				}
			]
		},
		{
			"id": 527,
			"name": "vecGetManhattanLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 528,
					"name": "vecGetManhattanLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the Manhattan length of the given vector, i.e. `|x| + |y|`."
					},
					"parameters": [
						{
							"id": 529,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecGetManhattanLength.ts",
					"line": 8,
					"character": 37
				}
			]
		},
		{
			"id": 530,
			"name": "vecLerp",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 531,
					"name": "vecLerp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Performs a linear interpolation between the two vectors. The `r` parameter is allowed to be outside `[0, 1]`."
					},
					"parameters": [
						{
							"id": 532,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 533,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 534,
							"name": "r",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 535,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecLerp.ts",
					"line": 14,
					"character": 23
				}
			]
		},
		{
			"id": 536,
			"name": "vecManhattanDistance",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 537,
					"name": "vecManhattanDistance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the Manhattan distance between the two vectors, interpreted as points in the plane.\nEquivalent to `|b.x - a.x| + |b.y - a.y|`."
					},
					"parameters": [
						{
							"id": 538,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 539,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecManhattanDistance.ts",
					"line": 10,
					"character": 36
				}
			]
		},
		{
			"id": 540,
			"name": "vecNormalize",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 541,
					"name": "vecNormalize",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Normalizes the vector to be length 1. If the given vector is the zero-vector, this method\nreturns `(NaN, NaN)`."
					},
					"parameters": [
						{
							"id": 542,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 543,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecNormalize.ts",
					"line": 13,
					"character": 28
				}
			]
		},
		{
			"id": 544,
			"name": "vecOrigin",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 545,
					"name": "vecOrigin",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the 2d origin vector, `(0, 0)`."
					},
					"parameters": [
						{
							"id": 546,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecOrigin.ts",
					"line": 9,
					"character": 25
				}
			]
		},
		{
			"id": 547,
			"name": "vecPerp",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 548,
					"name": "vecPerp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Computes the perp of the given vector, as defined by `vecPerp(a, b) = (-b, a)`.\nThis is equivalent to a counter-clockwise rotation in the standard plane."
					},
					"parameters": [
						{
							"id": 549,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 550,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecPerp.ts",
					"line": 12,
					"character": 23
				}
			]
		},
		{
			"id": 89,
			"name": "vecReset",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 90,
					"name": "vecReset",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Construct a new vector given an `x` and `y` value."
					},
					"parameters": [
						{
							"id": 91,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 92,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 93,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecReset.ts",
					"line": 10,
					"character": 24
				}
			]
		},
		{
			"id": 551,
			"name": "vecScale",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 552,
					"name": "vecScale",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Scales both coordinates of this vector by the given scalar."
					},
					"parameters": [
						{
							"id": 553,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 554,
							"name": "scalar",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 555,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecScale.ts",
					"line": 12,
					"character": 24
				}
			]
		},
		{
			"id": 556,
			"name": "vecSubtract",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 557,
					"name": "vecSubtract",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Subtracts vector `b` from vector `a`."
					},
					"parameters": [
						{
							"id": 558,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 559,
							"name": "b",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 560,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecSubtract.ts",
					"line": 12,
					"character": 27
				}
			]
		},
		{
			"id": 98,
			"name": "vecTransformByAff",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 99,
					"name": "vecTransformByAff",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Multiplies the vector by an affine matrix.",
						"text": "Per usual linear algebra, multiplying the vector `vec = (x, y)` according to an affine matrix\n`[a b c d e f]` is defined by:\n\n```\n⎡a c e⎤ ⎛x⎞   ⎛ax + cy + e⎞\n⎢b d f⎥ ⎜y⎟ = ⎜bx + dy + f⎟\n⎣0 0 1⎦ ⎝1⎠   ⎝     1     ⎠\n```\n"
					},
					"parameters": [
						{
							"id": 100,
							"name": "vec",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							}
						},
						{
							"id": 101,
							"name": "mat",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IMat2x3",
								"id": 23
							}
						},
						{
							"id": 102,
							"name": "out",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "reference",
								"name": "IVec",
								"id": 5
							},
							"defaultValue": " vecAlloc()"
						}
					],
					"type": {
						"type": "reference",
						"name": "IVec",
						"id": 5
					}
				}
			],
			"sources": [
				{
					"fileName": "vecFunctions/vecTransformByAff.ts",
					"line": 21,
					"character": 33
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				30,
				35,
				18,
				23,
				13,
				8,
				5
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				41,
				42
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				2,
				4,
				1,
				3
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				43,
				52,
				56,
				60,
				64,
				68,
				73,
				78,
				82,
				45,
				108,
				113,
				148,
				561,
				150,
				118,
				127,
				131,
				135,
				139,
				143,
				169,
				204,
				208,
				194,
				213,
				120,
				218,
				223,
				228,
				232,
				235,
				239,
				244,
				247,
				251,
				254,
				257,
				262,
				267,
				272,
				158,
				278,
				160,
				282,
				284,
				288,
				292,
				309,
				312,
				317,
				321,
				326,
				340,
				349,
				374,
				370,
				383,
				387,
				85,
				295,
				94,
				306,
				174,
				392,
				186,
				302,
				397,
				402,
				406,
				410,
				299,
				414,
				366,
				379,
				103,
				419,
				425,
				434,
				438,
				446,
				455,
				450,
				460,
				465,
				469,
				330,
				474,
				427,
				479,
				177,
				484,
				488,
				191,
				492,
				353,
				199,
				495,
				335,
				344,
				499,
				358,
				179,
				504,
				508,
				87,
				513,
				442,
				362,
				517,
				521,
				524,
				527,
				530,
				536,
				540,
				544,
				547,
				89,
				551,
				556,
				98
			]
		}
	]
}